// Generated by LiveScript 1.4.0
(function(){
  var simpleParseHis, fullParseHis, loadFiles, any, exists, removeAt, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice, split$ = ''.split;
  out$.simpleParseHis = simpleParseHis = function(it){
    var parsed;
    parsed = slice$.call(split$.call(it, '\n'), 1);
    return parsed.map((function(it){
      return split$.call(it, '\t');
    }));
  };
  out$.fullParseHis = fullParseHis = function(it){
    var i$, x$, ref$, len$, lresult$, j$, ref1$, len1$, i, key, results$ = [];
    for (i$ = 0, len$ = (ref$ = simpleParseHis(it)).length; i$ < len$; ++i$) {
      x$ = ref$[i$];
      lresult$ = {};
      for (j$ = 0, len1$ = (ref1$ = header).length; j$ < len1$; ++j$) {
        i = j$;
        key = ref1$[j$];
        lresult$[key] = x$[i];
      }
      results$.push(lresult$);
    }
    return results$;
  };
  out$.loadFiles = loadFiles = function(){
    var that;
    try {
      if (that = localStorage.getItem('files')) {
        return JSON.parse(that) || [];
      }
    } catch (e$) {}
    return [];
  };
  out$.any = any = curry$(function(pred, xs){
    var i$, len$, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (pred(x)) {
        return true;
      }
    }
    return false;
  });
  out$.exists = exists = curry$(function(col, value, xs){
    return any(function(it){
      return it[col] === value;
    }, xs);
  });
  out$.removeAt = removeAt = curry$(function(xs, idx){
    return xs.splice(idx, 1);
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
