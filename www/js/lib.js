// Generated by LiveScript 1.4.0
(function(){
  var simpleParseHis, fullParseHis, loadFiles, any, exists, removeAt, reduce, reduce1, sum, avg, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice, split$ = ''.split;
  out$.simpleParseHis = simpleParseHis = function(it){
    var parsed;
    parsed = slice$.call(split$.call(it, '\n'), 1);
    return parsed.map((function(it){
      return split$.call(it, '\t');
    }));
  };
  out$.fullParseHis = fullParseHis = function(it){
    var ref$, header, lines, i$, x$, len$, lresult$, j$, len1$, i, key, results$ = [];
    ref$ = simpleParseHis(it), header = ref$[0], lines = slice$.call(ref$, 1);
    for (i$ = 0, len$ = lines.length; i$ < len$; ++i$) {
      x$ = lines[i$];
      lresult$ = {};
      for (j$ = 0, len1$ = header.length; j$ < len1$; ++j$) {
        i = j$;
        key = header[j$];
        lresult$[key] = x$[i];
      }
      results$.push(lresult$);
    }
    return results$;
  };
  out$.loadFiles = loadFiles = function(){
    var that;
    try {
      if (that = localStorage.getItem('files')) {
        return JSON.parse(that) || [];
      }
    } catch (e$) {}
    return [];
  };
  out$.any = any = curry$(function(pred, xs){
    var i$, len$, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      if (pred(x)) {
        return true;
      }
    }
    return false;
  });
  out$.exists = exists = curry$(function(col, value, xs){
    return any(function(it){
      return it[col] === value;
    }, xs);
  });
  out$.removeAt = removeAt = curry$(function(xs, idx){
    return xs.splice(idx, 1);
  });
  out$.reduce = reduce = curry$(function(fn, memo, xs){
    var i$, len$, x;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      memo = fn(memo, x);
    }
    return memo;
  });
  out$.reduce1 = reduce1 = curry$(function(fn, xs){
    return reduce(fn, xs[0], slice$.call(xs, 1));
  });
  out$.sum = sum = function(it){
    return reduce1(curry$(function(x$, y$){
      return x$ + y$;
    }), it);
  };
  out$.avg = avg = function(it){
    return sum(it) / it.length;
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
